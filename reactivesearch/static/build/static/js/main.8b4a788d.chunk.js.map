{"version":3,"sources":["upload.js","index.js"],"names":["registerPlugin","FilePondPluginImageExifOrientation","FilePondPluginImagePreview","UploaderETD","props","state","console","log","this","pond","className","ref","files","allowMultiple","maxFiles","instantUpload","server","oninit","handleInit","onupdatefiles","fileItems","setState","map","fileItem","file","Component","UploaderTobacco","Main","forceRefresh","exact","path","component","rootElement","document","getElementById","ReactDOM","render","ResultListWrapper","ReactiveList","config","set","elasticsearch","base_uri","client","axios","create","baseURL","get","json","advanced_query","advanced_query2","Etd","Tobacco","app","url","theme","typography","fontFamily","transformRequest","request","request_body","body","split","body_preference","JSON","parse","body_query","preference","sT","value","length","fields","newfieldsinput","i","replace","query","bool","must","should","multi_match","method","data","stringify","headers","componentId","dataField","customQuery","fieldWeights","fuzziness","highlight","placeholder","title","react","and","label","focused","autoFocusEnd","numberOfMonths","initialMonth","Date","showClearAll","clearAllLabel","pagination","size","loader","res","key","_id","Content","Title","dangerouslySetInnerHTML","__html","Description","onclick_book_title","obj","contentType","success","$","post","or","onClick","Witness_Name","Document_Date","Case","Organization_Mentioned"],"mappings":"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","file":"static/js/main.8b4a788d.chunk.js","sourcesContent":["/*\n * @Author: Chris\n * Created Date: 2019-11-11 17:19:58\n * -----\n * Last Modified: 2019-11-11 21:07:03\n * Modified By: Chris\n * -----\n * Copyright (c) 2019\n */\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n    Route,\n    HashRouter\n} from \"react-router-dom\";\n// Import React FilePond\nimport { FilePond, registerPlugin } from \"react-filepond\";\n\n// Import FilePond styles\nimport \"filepond/dist/filepond.min.css\";\n\n// Import the Image EXIF Orientation and Image Preview plugins\n// Note: These need to be installed separately\nimport FilePondPluginImageExifOrientation from \"filepond-plugin-image-exif-orientation\";\nimport FilePondPluginImagePreview from \"filepond-plugin-image-preview\";\nimport \"filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css\";\n\n// Register the plugins\nregisterPlugin(FilePondPluginImageExifOrientation, FilePondPluginImagePreview);\n\n// Our app\nexport class UploaderETD extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            // Set initial files, type 'local' means this is a file\n            // that has already been uploaded to the server (see docs)\n            // files: [\n            //     {\n            //         source: \"upload.html\",\n            //         options: {\n            //             type: \"local\"\n            //         }\n            //     }\n            // ]\n        };\n    }\n\n    handleInit() {\n        console.log(\"FilePond instance has initialised\", this.pond);\n    }\n\n    render() {\n        return (\n            <div className=\"upload\">\n                {/* Pass FilePond properties as attributes */}\n                <a> Upload File to ETD </a>\n                <FilePond\n                    ref={ref => (this.pond = ref)}\n                    files={this.state.files}\n                    allowMultiple={true}\n                    maxFiles={10}\n                    instantUpload={false}\n                    server=\"/api\"\n                    oninit={() => this.handleInit()}\n                    onupdatefiles={fileItems => {\n                        // Set currently active file objects to this.state\n                        this.setState({\n                            files: fileItems.map(fileItem => fileItem.file)\n                        });\n                    }}\n                />\n            </div>\n        );\n    }\n}\n\n\n\nexport class UploaderTobacco extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            // Set initial files, type 'local' means this is a file\n            // that has already been uploaded to the server (see docs)\n            // files: [\n            //     {\n            //         source: \"upload.html\",\n            //         options: {\n            //             type: \"local\"\n            //         }\n            //     }\n            // ]\n        };\n    }\n\n    handleInit() {\n        console.log(\"FilePond instance has initialised\", this.pond);\n    }\n\n    render() {\n        return (\n            <div className=\"upload\">\n                {/* Pass FilePond properties as attributes */}\n                <a> Upload File to Tobacco </a>\n                <FilePond\n                    ref={ref => (this.pond = ref)}\n                    files={this.state.files}\n                    allowMultiple={true}\n                    instantUpload={false}\n                    maxFiles={10}\n                    server=\"/api\"\n                    oninit={() => this.handleInit()}\n                    onupdatefiles={fileItems => {\n                        // Set currently active file objects to this.state\n                        this.setState({\n                            files: fileItems.map(fileItem => fileItem.file)\n                        });\n                    }}\n                />\n            </div>\n        );\n    }\n}\n\n\n\nclass Main extends Component {\n    render() {\n        return (\n            <HashRouter forceRefresh={false}>\n                <div>\n                    <Route exact path=\"/upload/etd\" component={UploaderETD} />\n                    <Route exact path=\"/upload/tobacco\" component={UploaderTobacco} />\n                </div>\n            </HashRouter>\n        )\n    }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<Main />, rootElement);\n","/*\n * @Author: Chris\n * Created Date: 2019-11-07 14:21:27\n * -----\n<<<<<<< HEAD\n * Last Modified: 2019-12-10 01:58:30\n=======\n * Last Modified: 2019-12-10 01:58:30\n>>>>>>> master\n * Modified By: Chris\n * -----\n * Copyright (c) 2019\n */\n\nimport ReactDOM from \"react-dom\";\nimport {\n    // BrowserRouter as Router,\n    // Switch,\n    Route,\n    // Link,\n    HashRouter\n} from \"react-router-dom\";\nimport React, { Component } from \"react\";\nimport {\n    ReactiveBase,\n    ResultList,\n    ReactiveList,\n    MultiList,\n    MultiDropdownList,\n    MultiDataList,\n    DataSearch,\n    SelectedFilters,\n    DateRange\n} from \"@appbaseio/reactivesearch\";\nimport axios from \"axios\";\nimport \"./styles.css\";\nimport config from 'react-global-configuration';\nimport $ from 'jquery';\nimport { UploaderETD, UploaderTobacco } from './upload'\n\nconst { ResultListWrapper } = ReactiveList;\n\n// Global Configurations\nconfig.set({\n    // elasticsearch: \"http://localhost:9200/\",\n    // base_uri: \"http://0.0.0.0:3000\"\n    elasticsearch: \"http://2001.0468.0c80.6102.0001.7015.40b4.a1fb.ip6.name:9200/\",\n    base_uri: \"http://2001.0468.0c80.6102.0001.7015.b2eb.3731.ip6.name:3000/\"\n});\n\nconst client = axios.create({\n    baseURL: config.get(\"base_uri\"),\n    json: true\n});\n\nvar advanced_query = [\"Brands\", \"Witness_Name\", \"Person_Mentioned\", \"Organization_Mentioned\", \"Title\", \"Topic\"];\nvar advanced_query2 = [\"contributor-department\", \"contributor-author\",\n    \"contributor-committeechair\", \"contributor-committeecochair\",\n    \"contributor-committeemember\", \"degree-name\", \"description-abstract\", \"Author Email\", \"subject-none\",\n    \"title-none\"];\n\n\n\n// Main Search Page\n// With routers\nclass Main extends Component {\n    render() {\n        return (\n            <HashRouter forceRefresh={false}>\n                <div>\n                    {/* <nav>\n                        <ul>\n                            <li>\n                                <Link to=\"/etd\">etd</Link>\n                            </li>\n                            <li>\n                                <Link to=\"/tobacco\">tobacco</Link>\n                            </li>\n                        </ul>\n                    </nav> */}\n                    <Route exact path=\"/etd\" component={Etd} />\n                    <Route exact path=\"/tobacco\" component={Tobacco} />\n                    <Route exact path=\"/etd/upload\" component={UploaderETD} />\n                    <Route exact path=\"/tobacco/upload\" component={UploaderTobacco} />\n                </div>\n            </HashRouter>\n\n            // <Router>\n            //     <div>\n            //         <nav>\n            //             <ul>\n            //                 <li>\n            //                     <Link to=\"/search/etd\">etd</Link>\n            //                 </li>\n            //                 <li>\n            //                     <Link to=\"/search/tobacco\">tobacco</Link>\n            //                 </li>\n            //             </ul>\n            //         </nav>\n\n            //         <Switch>\n            //             <HashRouter path=\"/search/etd\">\n            //                 <Etd />\n            //             </HashRouter>\n            //             <HashRouter path=\"/search/tobacco\">\n            //                 <Tobacco />\n            //             </HashRouter>\n            //         </Switch>\n            //     </div>\n            // </Router>\n        )\n    }\n}\n\n\n// Search page for ETD\nclass Etd extends Component {\n    render() {\n        return (\n            <ReactiveBase\n                app=\"30k\"\n                // credentials=\"egdxpZGTu:54c431d1-6a44-44b8-b84a-e46c4fed2de6\"\n                url={config.get('elasticsearch')}\n                theme={{\n                    typography: {\n                        fontFamily:\n                            '\"Lato\", \"Open Sans\", \"Montserrat\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Noto Sans\", \"Ubuntu\", \"Droid Sans\", \"Helvetica Neue\", sans-serif'\n                    }\n                }}\n                transformRequest={request => {\n                    // Auto-suggestions start from 3rd characters\n                    console.log(\"object 1: %O\", request);\n                    var request_body = request.body.split('\\n');\n                    var body_preference = JSON.parse(request_body[0]);\n                    var body_query = JSON.parse(request_body[1]);\n                    if (body_preference.preference === \"List\" || body_preference === \"search\") {\n                        var searchText = document.getElementById(\"search-downshift-input\").value;\n                        var sT = searchText.split(\":\");\n\n                        if (sT.length > 1) //the first part of the split should be the relevant field(s)\n                        {\n                            var fields = sT[0].split(\"+\");\n                            var newfieldsinput = \"[\";\n                            for (var i = 0; i < fields.length; i++) {\n                                newfieldsinput = newfieldsinput + \"\\\"\" + fields[i] + \"\\\"\";\n                                if (i !== fields.length - 1) { newfieldsinput += \",\"; }\n\n                            }\n                            newfieldsinput += \"]\";\n                            // request.body = request.body.replace(\"[\\\"Brands\\\",\\\"Witness_Name\\\",\\\"Person_Mentioned\\\",\\\"Organization_Mentioned\\\",\\\"Title\\\",\\\"Topic\\\"]\", newfieldsinput );\n                            //Future work: make a function to put the fields in a variable instead of hardcoding\n                            request.body = request.body.replace(\"[\\\"degree-level\\\",\\\"contributor-department\\\",\\\"contributor-author\\\",\\\"contributor-committeechair\\\",\\\"contributor-committeecochair\\\",\\\"contributor-committeemember\\\",\\\"date-available\\\",\\\"date-issued\\\",\\\"degree-name\\\",\\\"description-abstract\\\",\\\"Author Email\\\",\\\"subject-none\\\",\\\"title-none\\\",\\\"type-none\\\"]\", newfieldsinput);\n\n                        }\n\n\n                        console.log(\"object 2: %O\", request);\n\n                        if (body_preference.preference === \"search\") {\n                            if (body_query.query.bool.must[0].bool.must[0].bool.should[0].multi_match.query.length < 3) {\n                                return null;\n                            }\n                        }\n\n                        // Post logs\n                        client({\n                            method: 'post',\n                            url: '/emitlogs',\n                            data: JSON.stringify(request),\n                            headers: {\n                                \"Content-Type\": \"application/json\",\n                            }\n                        });\n                        return request\n                    }\n                }} //TODO: replace with apiClient function to send request to back-end (Flask API)\n            >\n                <div className=\"fek-searching\">\n                    <div className=\"searchbar\">\n                        <DataSearch\n                            componentId=\"search\"\n                            dataField={[\"contributor-department\", \"contributor-author\",\n                                \"contributor-committeechair\", \"contributor-committeecochair\",\n                                \"contributor-committeemember\", \"degree-name\", \"description-abstract\", \"Author Email\", \"subject-none\",\n                                \"title-none\"]}\n                            customQuery={\n                                function (value, props) {\n                                    return {\n                                        query: {\n                                            multi_match: {\n                                                query: value,\n                                                fields: advanced_query2\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            fieldWeights={[1, 3, 3, 3, 1, 1, 1, 1, 1, 5, 1]}\n                            fuzziness={0}\n                            // debounce={100}\n                            highlight={true}\n                            placeholder=\"Search ETD\"\n                            title=\"Search for ETD\"\n                            react={{\n                                and: [\"contributor-department\", \"contributor-author\",\n                                    \"contributor-committeechair\", \"contributor-committeecochair\",\n                                    \"contributor-committeemember\",\n                                    \"degree-name\", \"description-abstract\", \"Author Email\", \"subject-none\", \"title-none\"]\n                            }}\n                        // renderNoSuggestion={() => (\n                        //     <div>\n                        //         No suggestions found\n                        // </div>\n                        // )}\n\n                        />\n                    </div>\n\n                    <div className=\"container\">\n                        <div>\n\n                            <MultiDataList\n                                componentId=\"filter_type-none\"\n                                dataField=\"type-none\"\n                                // size={100}\n                                data={\n                                    [{\n                                        label: \"Thesis\",\n                                        value: \"thesis\"\n                                    },\n                                    {\n                                        label: \"Dissertation\",\n                                        value: \"Dissertation \"\n                                    },]\n                                }\n                                title=\"Type\"\n                                className=\"filter\"\n                            />\n\n                            <MultiDataList\n                                componentId=\"filter_degree-level\"\n                                dataField=\"degree-level\"\n                                data={\n                                    [{\n                                        label: \"masters\",\n                                        value: \"masters\"\n                                    }, {\n                                        label: \"doctoral\",\n                                        value: \"doctoral\"\n                                    },]\n                                }\n                                title=\"Degree Level\"\n                            />\n\n                            <DateRange\n                                componentId=\"filter_date-issued\"\n                                dataField=\"date-issued\"\n                                title=\"Date Issued\"\n                                // customQuery={this.dateQuery}\n                                focused={false}\n                                autoFocusEnd={true}\n                                numberOfMonths={1}\n                                initialMonth={new Date('2019-10-01')}\n                            />\n\n                        </div>\n\n                        <div>\n                            <SelectedFilters\n                                showClearAll={true}\n                                clearAllLabel=\"Clear filters\"\n                            />\n                            <ReactiveList\n                                componentId=\"List\"\n                                dataField=\"Title\"\n                                pagination={true}\n                                className=\"result\"\n                                size={5}\n                                loader=\"Loading Results..\"\n                                react={{\n                                    and: [\"filter_type-none\", \"filter_degree-level\", \"search\", \"filter_date-issued\"]\n                                }}\n                                render={({ data }) => (\n                                    <ResultListWrapper>\n                                        {data.map(res => (\n                                            <ResultList key={res._id}>\n                                                {/* <ResultList.Image src={res.image} /> */}\n                                                <ResultList.Content>\n                                                    <ResultList.Title>\n                                                        <div\n                                                            className=\"book-title\"\n                                                            dangerouslySetInnerHTML={{\n                                                                __html: \"<a href=\\\"\" + res[\"identifier-uri\"] + \"\\\" target=\\\"_blank\\\">\\n\" + res[\"title-none\"] + \"</a>\",\n                                                            }}\n                                                        />\n                                                    </ResultList.Title>\n                                                    <ResultList.Description>\n                                                        <div className=\"flex column justify-space-between\">\n                                                            <div>\n                                                                <div>\n                                                                    by{' '}\n                                                                    {/* <span className=\"authors-list\">\n                                                                        {res.Witness_Name}\n                                                                    </span> */}\n                                                                    <div\n                                                                        className=\"authors-list\"\n                                                                        dangerouslySetInnerHTML={{\n                                                                            __html: res[\"contributor-author\"] + ', ' + res[\"contributor-committeechair\"] + ', ' + res[\"contributor-committeecochair\"] + ', ' + res[\"contributor-committeemember\"],\n                                                                        }}\n                                                                    />\n                                                                </div>\n                                                                {/* <div className=\"ratings-list flex align-center\">\n                                                                <span className=\"stars\">\n                                                                    {Array(res.average_rating_rounded)\n                                                                        .fill('x')\n                                                                        .map((\n                                                                            res, // eslint-disable-line\n                                                                            index,\n                                                                        ) => (\n                                                                                <i\n                                                                                    className=\"fas fa-star\"\n                                                                                    key={index} // eslint-disable-line\n                                                                                />\n                                                                            ))}\n                                                                </span>\n                                                                <span className=\"avg-rating\">\n                                                                    ({res.average_rating} avg)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t        </span>\n                                                            </div> */}\n                                                            </div>\n                                                            <span className=\"pub-year\">\n                                                                Pub: {res[\"date-issued\"]}\n                                                            </span>\n                                                            <div\n                                                                className=\"book-text\"\n                                                                dangerouslySetInnerHTML={{\n                                                                    __html: res[\"description-abstract\"],\n                                                                }}\n                                                            />\n                                                            <div\n                                                                className=\"book-text\"\n                                                                dangerouslySetInnerHTML={{\n                                                                    __html: res[\"subject-none\"],\n                                                                }}\n                                                            />\n\n                                                            <div\n                                                                className=\"book-text\"\n                                                                dangerouslySetInnerHTML={{\n                                                                    __html: res[\"type-none\"]\n                                                                }}\n                                                            />\n                                                        </div>\n                                                    </ResultList.Description>\n\n                                                </ResultList.Content>\n                                            </ResultList>\n                                        ))}\n                                    </ResultListWrapper>\n                                )}\n\n                            />\n                        </div>\n                    </div>\n                </div>\n            </ReactiveBase >\n        );\n    }\n}\n\n// Search Page for Tobacco\nclass Tobacco extends Component {\n\n    onclick_book_title = obj => {\n        var data = {\n            method: 'post',\n            url: '/emitlogs',\n            data: JSON.stringify(obj),\n            contentType: \"application/json\",\n            success: function () {\n                console.log('success');\n                //window.location.href = obj.url;\n            }\n        };\n        $.post(data);\n    };\n    render() {\n        return (\n            <ReactiveBase\n                app=\"tobacco\"\n                // credentials=\"egdxpZGTu:54c431d1-6a44-44b8-b84a-e46c4fed2de6\"\n                url={config.get('elasticsearch')}\n                theme={{\n                    typography: {\n                        fontFamily:\n                            '\"Lato\", \"Open Sans\", \"Montserrat\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Noto Sans\", \"Ubuntu\", \"Droid Sans\", \"Helvetica Neue\", sans-serif'\n                    }\n                }}\n                transformRequest={request => {\n                    // Auto-suggestions start from 3rd characters\n                    console.log(\"object 1: %O\", request);\n                    var request_body = request.body.split('\\n');\n                    var body_preference = JSON.parse(request_body[0]);\n                    var body_query = JSON.parse(request_body[1]);\n                    if (body_preference.preference === \"List\" || body_preference.preference === \"search\") {\n                        console.log(\"I was here1\");\n                        var searchText = document.getElementById(\"search-downshift-input\").value;\n                        var sT = searchText.split(\":\");\n                        if (sT.length > 1) //the first part of the split should be the relevant field(s)\n                        {\n                            console.log(\"I was here2\");\n                            var fields = sT[0].split(\"+\");\n                            var newfieldsinput = \"[\";\n                            for (var i = 0; i < fields.length; i++) {\n                                newfieldsinput = newfieldsinput + \"\\\"\" + fields[i] + \"\\\"\";\n                                if (i !== fields.length - 1) { newfieldsinput += \",\"; }\n\n                            }\n                            newfieldsinput += \"]\";\n                            console.log(\"The newfieldsinput is: \" + newfieldsinput);\n                            request.body = request.body.replace(\"[\\\"Brands\\\",\\\"Witness_Name\\\",\\\"Person_Mentioned\\\",\\\"Organization_Mentioned\\\",\\\"Title\\\",\\\"Topic\\\"]\", newfieldsinput);\n\n\n                        }\n                    }\n\n\n                    console.log(\"object 2: %O\", request);\n\n                    if (body_preference.preference === \"search\") {\n                        if (body_query.query.bool.must[0].bool.must[0].bool.should[0].multi_match.query.length < 3) {\n                            return null;\n                        }\n                    }\n\n                    // Post logs\n                    client({\n                        method: 'post',\n                        url: '/emitlogs',\n                        data: JSON.stringify(request),\n                        headers: {\n                            \"Content-Type\": \"application/json\",\n                        }\n                    });\n                    return request\n                }\n                } //TODO: replace with apiClient function to send request to back-end (Flask API)\n            >\n                <div className=\"fek-searching\">\n                    <div className=\"searchbar\">\n                        <DataSearch\n                            componentId=\"search\"\n                            dataField={[\n                                \"Brands\", \"Witness_Name\", \"Person_Mentioned\", \"Organization_Mentioned\", \"Title\", \"Topic\"\n                            ]}\n                            customQuery={\n                                function (value, props) {\n                                    return {\n                                        query: {\n                                            multi_match: {\n                                                query: value,\n                                                fields: advanced_query\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            fieldWeights={[1, 3, 1, 1, 5, 1]}\n                            fuzziness={0}\n                            // debounce={100}\n                            highlight={true}\n                            placeholder=\"Search Tobacco\"\n                            title=\"Search for Tobacco\"\n                            react={{\n                                and: [\"Brands\", \"Witness_Name\", \"Person_Mentioned\", \"Organization_Mentioned\", \"Title\"],\n                                or: [\"Topic\"]\n                            }}\n                        // renderNoSuggestion={() => (\n                        //     <div>\n                        //         No suggestions found\n                        // </div>\n                        // )}\n\n                        />\n                    </div>\n\n                    <div className=\"container\">\n                        <div>\n                            <MultiList\n                                componentId=\"filter_Document_Type\"\n                                title=\"Document Type\"\n                                dataField=\"Document_Type\"\n                                size={100}\n                                className=\"filter\"\n                            />\n\n                            <MultiList\n                                componentId=\"filter_availablility\"\n                                dataField=\"availablility\"\n                                size={100}\n                                title=\"Availablility\"\n                                className=\"filter\"\n                            />\n\n                            <MultiDropdownList\n                                componentId=\"filter_availablilitystatus\"\n                                dataField=\"availablilitystatus\"\n                                size={100}\n                                title=\"Availablility Status\"\n                                className=\"filter\"\n                            />\n\n                            <DateRange\n                                componentId=\"filter_Document_Date\"\n                                dataField=\"Document_Date\"\n                                title=\"Document Date\"\n                                // customQuery={this.dateQuery}\n                                focused={false}\n                                autoFocusEnd={true}\n                                numberOfMonths={1}\n                                initialMonth={new Date('2019-10-01')}\n                            />\n\n                        </div>\n\n                        <div>\n                            <SelectedFilters\n                                showClearAll={true}\n                                clearAllLabel=\"Clear filters\"\n                            />\n                            <ReactiveList\n                                componentId=\"List\"\n                                dataField=\"Title\"\n                                pagination={true}\n                                className=\"result\"\n                                size={5}\n                                loader=\"Loading Results..\"\n                                react={{\n                                    and: [\"filter_Document_Type\", \"filter_availablility\", \"filter_availablilitystatus\", \"filter_Brands\", \"search\", \"filter_Document_Date\"]\n                                }}\n                                render={({ data }) => (\n                                    <ResultListWrapper>\n                                        {data.map(res => (\n                                            <ResultList key={res._id}>\n                                                {/* <ResultList.Image src={res.image} /> */}\n                                                <ResultList.Content>\n                                                    <ResultList.Title>\n                                                        <div\n                                                            className=\"book-title\"\n                                                            onClick={() => this.onclick_book_title(res)}\n                                                            dangerouslySetInnerHTML={{\n                                                                __html: \"<a href=\\\"\" + res.url + \"\\\" target=\\\"_blank\\\">\\n\" + res.Title + \"</a>\",\n                                                            }}\n                                                        />\n                                                    </ResultList.Title>\n                                                    <ResultList.Description>\n                                                        <div className=\"flex column justify-space-between\">\n                                                            <div>\n                                                                <div>\n                                                                    by{' '}\n                                                                    {/* <span className=\"authors-list\">\n                                                                        {res.Witness_Name}\n                                                                    </span> */}\n                                                                    <div\n                                                                        className=\"authors-list\"\n                                                                        dangerouslySetInnerHTML={{\n                                                                            __html: res.Witness_Name,\n                                                                        }}\n                                                                    />\n                                                                </div>\n                                                                {/* <div className=\"ratings-list flex align-center\">\n                                                                <span className=\"stars\">\n                                                                    {Array(res.average_rating_rounded)\n                                                                        .fill('x')\n                                                                        .map((\n                                                                            res, // eslint-disable-line\n                                                                            index,\n                                                                        ) => (\n                                                                                <i\n                                                                                    className=\"fas fa-star\"\n                                                                                    key={index} // eslint-disable-line\n                                                                                />\n                                                                            ))}\n                                                                </span>\n                                                                <span className=\"avg-rating\">\n                                                                    ({res.average_rating} avg)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t        </span>\n                                                            </div> */}\n                                                            </div>\n                                                            <span className=\"pub-year\">\n                                                                Pub: {res.Document_Date}\n                                                            </span>\n                                                            <div\n                                                                className=\"book-text\"\n                                                                dangerouslySetInnerHTML={{\n                                                                    __html: res.Case,\n                                                                }}\n                                                            />\n                                                            <div\n                                                                className=\"book-text\"\n                                                                dangerouslySetInnerHTML={{\n                                                                    __html: res.Organization_Mentioned,\n                                                                }}\n                                                            />\n\n                                                        </div>\n                                                    </ResultList.Description>\n\n                                                </ResultList.Content>\n                                            </ResultList>\n                                        ))}\n                                    </ResultListWrapper>\n                                )}\n\n                            />\n                        </div>\n                    </div>\n                </div>\n            </ReactiveBase >\n        );\n    }\n}\n\n\n\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<Main />, rootElement);\n"],"sourceRoot":""}