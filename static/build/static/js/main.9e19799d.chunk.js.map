{"version":3,"sources":["index.js"],"names":["ResultListWrapper","ReactiveList","config","set","elasticsearch","base_uri","client","axios","create","baseURL","get","json","advanced_query","advanced_query2","Main","forceRefresh","exact","path","component","Etd","Tobacco","Component","app","url","theme","typography","fontFamily","transformRequest","request","console","log","request_body","body","split","body_preference","JSON","parse","body_query","preference","sT","document","getElementById","value","length","fields","newfieldsinput","i","replace","query","bool","must","should","multi_match","method","data","stringify","headers","className","componentId","dataField","customQuery","props","fieldWeights","fuzziness","highlight","placeholder","title","react","and","size","focused","autoFocusEnd","numberOfMonths","initialMonth","Date","showClearAll","clearAllLabel","pagination","loader","render","map","res","key","_id","Content","Title","dangerouslySetInnerHTML","__html","Description","onclick_book_title","obj","contentType","success","$","post","or","onClick","Witness_Name","Document_Date","Case","Organization_Mentioned","rootElement","ReactDOM"],"mappings":"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","file":"static/js/main.9e19799d.chunk.js","sourcesContent":["/*\n * @Author: Chris\n * Created Date: 2019-11-07 14:21:27\n * -----\n * Last Modified: 2019-11-11 15:52:51\n * Modified By: Chris\n * -----\n * Copyright (c) 2019\n */\n\nimport ReactDOM from \"react-dom\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link,\n    HashRouter\n} from \"react-router-dom\";\nimport React, { Component } from \"react\";\nimport {\n    ReactiveBase,\n    ResultList,\n    ReactiveList,\n    MultiList,\n    MultiDropdownList,\n    DataSearch,\n    SelectedFilters,\n    DateRange\n} from \"@appbaseio/reactivesearch\";\nimport axios from \"axios\";\nimport \"./styles.css\";\nimport config from 'react-global-configuration';\nimport $ from 'jquery';\n\nconst { ResultListWrapper } = ReactiveList;\n\n// Global Configurations\nconfig.set({\n    // elasticsearch: \"http://localhost:9200/\",\n    // base_uri: \"http://0.0.0.0:3000\"\n    elasticsearch: \"http://2001.0468.0c80.6102.0001.7015.40b4.a1fb.ip6.name:9200/\",\n    base_uri: \"http://2001.0468.0c80.6102.0001.7015.a60f.cf44.ip6.name:3000/\"\n});\n\nconst client = axios.create({\n    baseURL: config.get(\"base_uri\"),\n    json: true\n});\n\nvar advanced_query = [\"Brands\", \"Witness_Name\", \"Person_Mentioned\", \"Organization_Mentioned\", \"Title\", \"Topic\"];\nvar advanced_query2 = [\"contributor-department\", \"contributor-author\",\n    \"contributor-committeechair\", \"contributor-committeecochair\",\n    \"contributor-committeemember\", \"degree-name\", \"description-abstract\", \"Author Email\", \"subject-none\",\n    \"title-none\"];\n\n\n\n// Main Search Page\n// With routers\nclass Main extends Component {\n    render() {\n        return (\n            <HashRouter forceRefresh={false}>\n                <div>\n                    {/* <nav>\n                        <ul>\n                            <li>\n                                <Link to=\"/etd\">etd</Link>\n                            </li>\n                            <li>\n                                <Link to=\"/tobacco\">tobacco</Link>\n                            </li>\n                        </ul>\n                    </nav> */}\n                    <Route exact path=\"/etd\" component={Etd} />\n                    <Route exact path=\"/tobacco\" component={Tobacco} />\n                </div>\n            </HashRouter>\n\n            // <Router>\n            //     <div>\n            //         <nav>\n            //             <ul>\n            //                 <li>\n            //                     <Link to=\"/search/etd\">etd</Link>\n            //                 </li>\n            //                 <li>\n            //                     <Link to=\"/search/tobacco\">tobacco</Link>\n            //                 </li>\n            //             </ul>\n            //         </nav>\n\n            //         <Switch>\n            //             <HashRouter path=\"/search/etd\">\n            //                 <Etd />\n            //             </HashRouter>\n            //             <HashRouter path=\"/search/tobacco\">\n            //                 <Tobacco />\n            //             </HashRouter>\n            //         </Switch>\n            //     </div>\n            // </Router>\n        )\n    }\n}\n\n\n// Search page for ETD\nclass Etd extends Component {\n    render() {\n        return (\n            <ReactiveBase\n                app=\"tobacco3\"\n                // credentials=\"egdxpZGTu:54c431d1-6a44-44b8-b84a-e46c4fed2de6\"\n                url={config.get('elasticsearch')}\n                theme={{\n                    typography: {\n                        fontFamily:\n                            '\"Lato\", \"Open Sans\", \"Montserrat\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Noto Sans\", \"Ubuntu\", \"Droid Sans\", \"Helvetica Neue\", sans-serif'\n                    }\n                }}\n                transformRequest={request => {\n                    // Auto-suggestions start from 3rd characters\n                    console.log(\"object 1: %O\", request);\n                    var request_body = request.body.split('\\n');\n                    var body_preference = JSON.parse(request_body[0]);\n                    var body_query = JSON.parse(request_body[1]);\n                    if (body_preference.preference === \"List\" || body_preference === \"search\") {\n                        var searchText = document.getElementById(\"search-downshift-input\").value;\n                        var sT = searchText.split(\":\");\n\n                        if (sT.length > 1) //the first part of the split should be the relevant field(s)\n                        {\n                            var fields = sT[0].split(\"+\");\n                            var newfieldsinput = \"[\";\n                            for (var i = 0; i < fields.length; i++) {\n                                newfieldsinput = newfieldsinput + \"\\\"\" + fields[i] + \"\\\"\";\n                                if (i !== fields.length - 1) { newfieldsinput += \",\"; }\n\n                            }\n                            newfieldsinput += \"]\";\n                            // request.body = request.body.replace(\"[\\\"Brands\\\",\\\"Witness_Name\\\",\\\"Person_Mentioned\\\",\\\"Organization_Mentioned\\\",\\\"Title\\\",\\\"Topic\\\"]\", newfieldsinput );\n                            //Future work: make a function to put the fields in a variable instead of hardcoding\n                            request.body = request.body.replace(\"[\\\"degree-level\\\",\\\"contributor-department\\\",\\\"contributor-author\\\",\\\"contributor-committeechair\\\",\\\"contributor-committeecochair\\\",\\\"contributor-committeemember\\\",\\\"date-available\\\",\\\"date-issued\\\",\\\"degree-name\\\",\\\"description-abstract\\\",\\\"Author Email\\\",\\\"subject-none\\\",\\\"title-none\\\",\\\"type-none\\\"]\", newfieldsinput);\n\n                        }\n\n\n                        console.log(\"object 2: %O\", request);\n\n                        if (body_preference.preference === \"search\") {\n                            if (body_query.query.bool.must[0].bool.must[0].bool.should[0].multi_match.query.length < 3) {\n                                return null;\n                            }\n                        }\n\n                        // Post logs\n                        client({\n                            method: 'post',\n                            url: '/emitlogs',\n                            data: JSON.stringify(request),\n                            headers: {\n                                \"Content-Type\": \"application/json\",\n                            }\n                        });\n                        return request\n                    }\n                }} //TODO: replace with apiClient function to send request to back-end (Flask API)\n            >\n                <div className=\"fek-searching\">\n                    <div className=\"searchbar\">\n                        <DataSearch\n                            componentId=\"search\"\n                            dataField={[\"contributor-department\", \"contributor-author\",\n                                \"contributor-committeechair\", \"contributor-committeecochair\",\n                                \"contributor-committeemember\", \"degree-name\", \"description-abstract\", \"Author Email\", \"subject-none\",\n                                \"title-none\"]}\n                            customQuery={\n                                function (value, props) {\n                                    return {\n                                        query: {\n                                            multi_match: {\n                                                query: value,\n                                                fields: advanced_query2\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            fieldWeights={[1, 3, 3, 3, 1, 1, 1, 1, 1, 5, 1]}\n                            fuzziness={0}\n                            // debounce={100}\n                            highlight={true}\n                            placeholder=\"Search ETD\"\n                            title=\"Search for ETD\"\n                            react={{\n                                and: [\"contributor-department\", \"contributor-author\",\n                                    \"contributor-committeechair\", \"contributor-committeecochair\",\n                                    \"contributor-committeemember\",\n                                    \"degree-name\", \"description-abstract\", \"Author Email\", \"subject-none\", \"title-none\"]\n                            }}\n                        // renderNoSuggestion={() => (\n                        //     <div>\n                        //         No suggestions found\n                        // </div>\n                        // )}\n\n                        />\n                    </div>\n\n                    <div className=\"container\">\n                        <div>\n                            <MultiList\n                                componentId=\"filter_type-none\"\n                                title=\"type-none\"\n                                dataField=\"type-none\"\n                                size={100}\n                                className=\"filter\"\n                            />\n\n                            <MultiDropdownList\n                                componentId=\"filter_degree-level\"\n                                dataField=\"degree-level\"\n                                size={100}\n                                title=\"degree-level\"\n                            />\n\n                            <DateRange\n                                componentId=\"filter_date-issued\"\n                                dataField=\"date-issued\"\n                                title=\"date-issued\"\n                                // customQuery={this.dateQuery}\n                                focused={false}\n                                autoFocusEnd={true}\n                                numberOfMonths={1}\n                                initialMonth={new Date('2019-10-01')}\n                            />\n\n                        </div>\n\n                        <div>\n                            <SelectedFilters\n                                showClearAll={true}\n                                clearAllLabel=\"Clear filters\"\n                            />\n                            <ReactiveList\n                                componentId=\"List\"\n                                dataField=\"Title\"\n                                pagination={true}\n                                className=\"result\"\n                                size={5}\n                                loader=\"Loading Results..\"\n                                react={{\n                                    and: [\"filter_type-none\", \"filter_degree-level\", \"search\", \"filter_date-issued\"]\n                                }}\n                                render={({ data }) => (\n                                    <ResultListWrapper>\n                                        {data.map(res => (\n                                            <ResultList key={res._id}>\n                                                {/* <ResultList.Image src={res.image} /> */}\n                                                <ResultList.Content>\n                                                    <ResultList.Title>\n                                                        <div\n                                                            className=\"book-title\"\n                                                            dangerouslySetInnerHTML={{\n                                                                __html: \"<a href=\\\"\" + \"#\" + \"\\\" target=\\\"_blank\\\">\\n\" + res[\"title-none\"] + \"</a>\",\n                                                            }}\n                                                        />\n                                                    </ResultList.Title>\n                                                    <ResultList.Description>\n                                                        <div className=\"flex column justify-space-between\">\n                                                            <div>\n                                                                <div>\n                                                                    by{' '}\n                                                                    {/* <span className=\"authors-list\">\n                                                                        {res.Witness_Name}\n                                                                    </span> */}\n                                                                    <div\n                                                                        className=\"authors-list\"\n                                                                        dangerouslySetInnerHTML={{\n                                                                            __html: res[\"contributor-author\"] + ', ' + res[\"contributor-committeechair\"] + ', ' + res[\"contributor-committeecochair\"] + ', ' + res[\"contributor-committeemember\"],\n                                                                        }}\n                                                                    />\n                                                                </div>\n                                                                {/* <div className=\"ratings-list flex align-center\">\n                                                                <span className=\"stars\">\n                                                                    {Array(res.average_rating_rounded)\n                                                                        .fill('x')\n                                                                        .map((\n                                                                            res, // eslint-disable-line\n                                                                            index,\n                                                                        ) => (\n                                                                                <i\n                                                                                    className=\"fas fa-star\"\n                                                                                    key={index} // eslint-disable-line\n                                                                                />\n                                                                            ))}\n                                                                </span>\n                                                                <span className=\"avg-rating\">\n                                                                    ({res.average_rating} avg)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t        </span>\n                                                            </div> */}\n                                                            </div>\n                                                            <span className=\"pub-year\">\n                                                                Pub: {res[\"date-issued\"]}\n                                                            </span>\n                                                            <div\n                                                                className=\"book-text\"\n                                                                dangerouslySetInnerHTML={{\n                                                                    __html: res[\"description-abstract\"],\n                                                                }}\n                                                            />\n                                                            <div\n                                                                className=\"book-text\"\n                                                                dangerouslySetInnerHTML={{\n                                                                    __html: res[\"subject-none\"],\n                                                                }}\n                                                            />\n                                                        </div>\n                                                    </ResultList.Description>\n\n                                                </ResultList.Content>\n                                            </ResultList>\n                                        ))}\n                                    </ResultListWrapper>\n                                )}\n\n                            />\n                        </div>\n                    </div>\n                </div>\n            </ReactiveBase >\n        );\n    }\n}\n\n// Search Page for Tobacco\nclass Tobacco extends Component {\n\n    onclick_book_title = obj => {\n        var data = {\n            method: 'post',\n            url: '/emitlogs',\n            data: JSON.stringify(obj),\n            contentType: \"application/json\",\n            success: function () {\n                console.log('success');\n                //window.location.href = obj.url;\n            }\n        };\n        $.post(data);\n    };\n    render() {\n        return (\n            <ReactiveBase\n                app=\"tobacco3\"\n                // credentials=\"egdxpZGTu:54c431d1-6a44-44b8-b84a-e46c4fed2de6\"\n                url={config.get('elasticsearch')}\n                theme={{\n                    typography: {\n                        fontFamily:\n                            '\"Lato\", \"Open Sans\", \"Montserrat\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Noto Sans\", \"Ubuntu\", \"Droid Sans\", \"Helvetica Neue\", sans-serif'\n                    }\n                }}\n                transformRequest={request => {\n                    // Auto-suggestions start from 3rd characters\n                    console.log(\"object 1: %O\", request);\n                    var request_body = request.body.split('\\n');\n                    var body_preference = JSON.parse(request_body[0]);\n                    var body_query = JSON.parse(request_body[1]);\n                    if (body_preference.preference === \"List\" || body_preference.preference === \"search\") {\n                        console.log(\"I was here1\");\n                        var searchText = document.getElementById(\"search-downshift-input\").value;\n                        var sT = searchText.split(\":\");\n                        if (sT.length > 1) //the first part of the split should be the relevant field(s)\n                        {\n                            console.log(\"I was here2\");\n                            var fields = sT[0].split(\"+\");\n                            var newfieldsinput = \"[\";\n                            for (var i = 0; i < fields.length; i++) {\n                                newfieldsinput = newfieldsinput + \"\\\"\" + fields[i] + \"\\\"\";\n                                if (i != fields.length - 1) { newfieldsinput += \",\"; }\n\n                            }\n                            newfieldsinput += \"]\";\n                            console.log(\"The newfieldsinput is: \" + newfieldsinput);\n                            request.body = request.body.replace(\"[\\\"Brands\\\",\\\"Witness_Name\\\",\\\"Person_Mentioned\\\",\\\"Organization_Mentioned\\\",\\\"Title\\\",\\\"Topic\\\"]\", newfieldsinput);\n\n\n                        }\n                    }\n\n\n                    console.log(\"object 2: %O\", request);\n\n                    if (body_preference.preference === \"search\") {\n                        if (body_query.query.bool.must[0].bool.must[0].bool.should[0].multi_match.query.length < 3) {\n                            return null;\n                        }\n                    }\n\n                    // Post logs\n                    client({\n                        method: 'post',\n                        url: '/emitlogs',\n                        data: JSON.stringify(request),\n                        headers: {\n                            \"Content-Type\": \"application/json\",\n                        }\n                    });\n                    return request\n                }\n                } //TODO: replace with apiClient function to send request to back-end (Flask API)\n            >\n                <div className=\"fek-searching\">\n                    <div className=\"searchbar\">\n                        <DataSearch\n                            componentId=\"search\"\n                            dataField={[\n                                \"Brands\", \"Witness_Name\", \"Person_Mentioned\", \"Organization_Mentioned\", \"Title\", \"Topic\"\n                            ]}\n                            customQuery={\n                                function (value, props) {\n                                    return {\n                                        query: {\n                                            multi_match: {\n                                                query: value,\n                                                fields: advanced_query\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            fieldWeights={[1, 3, 1, 1, 5, 1]}\n                            fuzziness={0}\n                            // debounce={100}\n                            highlight={true}\n                            placeholder=\"Search Tobacco\"\n                            title=\"Search for Tobacco\"\n                            react={{\n                                and: [\"Brands\", \"Witness_Name\", \"Person_Mentioned\", \"Organization_Mentioned\", \"Title\"],\n                                or: [\"Topic\"]\n                            }}\n                        // renderNoSuggestion={() => (\n                        //     <div>\n                        //         No suggestions found\n                        // </div>\n                        // )}\n\n                        />\n                    </div>\n\n                    <div className=\"container\">\n                        <div>\n                            <MultiList\n                                componentId=\"filter_Document_Type\"\n                                title=\"Document_Type\"\n                                dataField=\"Document_Type\"\n                                size={100}\n                                className=\"filter\"\n                            />\n\n                            <MultiList\n                                componentId=\"filter_availablility\"\n                                dataField=\"availablility\"\n                                size={100}\n                                title=\"availablility\"\n                                className=\"filter\"\n                            />\n\n                            <MultiDropdownList\n                                componentId=\"filter_availablilitystatus\"\n                                dataField=\"availablilitystatus\"\n                                size={100}\n                                title=\"availablilitystatus\"\n                                className=\"filter\"\n                            />\n\n                            <DateRange\n                                componentId=\"filter_Document_Date\"\n                                dataField=\"Document_Date\"\n                                title=\"Document_Date\"\n                                // customQuery={this.dateQuery}\n                                focused={false}\n                                autoFocusEnd={true}\n                                numberOfMonths={1}\n                                initialMonth={new Date('2019-10-01')}\n                            />\n\n                        </div>\n\n                        <div>\n                            <SelectedFilters\n                                showClearAll={true}\n                                clearAllLabel=\"Clear filters\"\n                            />\n                            <ReactiveList\n                                componentId=\"List\"\n                                dataField=\"Title\"\n                                pagination={true}\n                                className=\"result\"\n                                size={5}\n                                loader=\"Loading Results..\"\n                                react={{\n                                    and: [\"filter_Document_Type\", \"filter_availablility\", \"filter_availablilitystatus\", \"filter_Brands\", \"search\", \"filter_Document_Date\"]\n                                }}\n                                render={({ data }) => (\n                                    <ResultListWrapper>\n                                        {data.map(res => (\n                                            <ResultList key={res._id}>\n                                                {/* <ResultList.Image src={res.image} /> */}\n                                                <ResultList.Content>\n                                                    <ResultList.Title>\n                                                        <div\n                                                            className=\"book-title\"\n                                                            onClick={() => this.onclick_book_title(res)}\n                                                            dangerouslySetInnerHTML={{\n                                                                __html: \"<a href=\\\"\" + res.url + \"\\\" target=\\\"_blank\\\">\\n\" + res.Title + \"</a>\",\n                                                            }}\n                                                        />\n                                                    </ResultList.Title>\n                                                    <ResultList.Description>\n                                                        <div className=\"flex column justify-space-between\">\n                                                            <div>\n                                                                <div>\n                                                                    by{' '}\n                                                                    {/* <span className=\"authors-list\">\n                                                                        {res.Witness_Name}\n                                                                    </span> */}\n                                                                    <div\n                                                                        className=\"authors-list\"\n                                                                        dangerouslySetInnerHTML={{\n                                                                            __html: res.Witness_Name,\n                                                                        }}\n                                                                    />\n                                                                </div>\n                                                                {/* <div className=\"ratings-list flex align-center\">\n                                                                <span className=\"stars\">\n                                                                    {Array(res.average_rating_rounded)\n                                                                        .fill('x')\n                                                                        .map((\n                                                                            res, // eslint-disable-line\n                                                                            index,\n                                                                        ) => (\n                                                                                <i\n                                                                                    className=\"fas fa-star\"\n                                                                                    key={index} // eslint-disable-line\n                                                                                />\n                                                                            ))}\n                                                                </span>\n                                                                <span className=\"avg-rating\">\n                                                                    ({res.average_rating} avg)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t        </span>\n                                                            </div> */}\n                                                            </div>\n                                                            <span className=\"pub-year\">\n                                                                Pub: {res.Document_Date}\n                                                            </span>\n                                                            <div\n                                                                className=\"book-text\"\n                                                                dangerouslySetInnerHTML={{\n                                                                    __html: res.Case,\n                                                                }}\n                                                            />\n                                                            <div\n                                                                className=\"book-text\"\n                                                                dangerouslySetInnerHTML={{\n                                                                    __html: res.Organization_Mentioned,\n                                                                }}\n                                                            />\n                                                        </div>\n                                                    </ResultList.Description>\n\n                                                </ResultList.Content>\n                                            </ResultList>\n                                        ))}\n                                    </ResultListWrapper>\n                                )}\n\n                            />\n                        </div>\n                    </div>\n                </div>\n            </ReactiveBase >\n        );\n    }\n}\n\n\n\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<Main />, rootElement);\n"],"sourceRoot":""}