{"version":3,"sources":["index.js"],"names":["ResultListWrapper","ReactiveList","config","set","elasticsearch","base_uri","client","axios","create","baseURL","get","json","Main","value","query","range","date_from","gte","moment","start","format","date_to","lte","end","bool","must","app","url","theme","typography","fontFamily","transformRequest","request","request_body","body","split","body_preference","JSON","parse","body_query","preference","should","multi_match","length","method","data","stringify","headers","className","componentId","dataField","fuzziness","highlight","highlightField","placeholder","title","react","and","or","size","customQuery","this","dateQuery","initialMonth","Date","showClearAll","clearAllLabel","pagination","loader","render","map","res","key","_id","Content","Title","dangerouslySetInnerHTML","__html","Description","Witness_Name","Document_Date","Case","Organization_Mentioned","Component","rootElement","document","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.58d4c355.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport moment from 'moment';\nimport {\n    ReactiveBase,\n    ResultList,\n    ReactiveList,\n    MultiList,\n    MultiDropdownList,\n    DataSearch,\n    SelectedFilters,\n    DateRange\n} from \"@appbaseio/reactivesearch\";\nimport axios from \"axios\";\nimport \"./styles.css\";\nimport config from 'react-global-configuration';\n\nconst { ResultListWrapper } = ReactiveList;\n\n// Global Configurations\nconfig.set({\n    elasticsearch: \"http://localhost:9200/\",\n    base_uri: \"http://0.0.0.0:3000\"\n});\n\nconst client = axios.create({\n    baseURL: config.get(\"base_uri\"),\n    json: true\n});\n\nclass Main extends Component {\n    dateQuery(value) {\n        let query = null;\n        if (value) {\n            query = [\n                {\n                    range: {\n                        date_from: {\n                            gte: moment(value.start).format('YYYYMMDD'),\n                        },\n                    },\n                },\n                {\n                    range: {\n                        date_to: {\n                            lte: moment(value.end).format('YYYYMMDD'),\n                        },\n                    },\n                },\n            ];\n        }\n        return query ? { query: { bool: { must: query } } } : null;\n    }\n\n    render() {\n        return (\n            <ReactiveBase\n                app=\"tobacco3\"\n                // credentials=\"egdxpZGTu:54c431d1-6a44-44b8-b84a-e46c4fed2de6\"\n                url={config.get('elasticsearch')}\n                theme={{\n                    typography: {\n                        fontFamily:\n                            '\"Lato\", \"Open Sans\", \"Montserrat\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Noto Sans\", \"Ubuntu\", \"Droid Sans\", \"Helvetica Neue\", sans-serif'\n                    }\n                }}\n                transformRequest={request => {\n                    // Auto-suggestions start from 3rd characters\n                    var request_body = request.body.split('\\n');\n                    var body_preference = JSON.parse(request_body[0])\n                    var body_query = JSON.parse(request_body[1])\n                    if (body_preference.preference === \"search\") {\n                        if (body_query.query.bool.must[0].bool.must[0].bool.should[0].multi_match.query.length < 3) {\n                            return {};\n                        }\n                    }\n\n                    // Post logs\n                    client({\n                        method: 'post',\n                        url: '/emitlogs',\n                        data: JSON.stringify(request),\n                        headers: {\n                            \"Content-Type\": \"application/json\",\n                        }\n                    });\n                    return request\n                }} //TODO: replace with apiClient function to send request to back-end (Flask API)\n            >\n                <div className=\"fek-searching\">\n                    <div className=\"searchbar\">\n                        <DataSearch\n                            componentId=\"search\"\n                            dataField={[\n                                \"Brands\", \"Witness_Name\", \"Person_Mentioned\", \"Organization_Mentioned\", \"Title\", \"Topic\"\n                            ]}\n                            // fieldWeights={[2, 1, 2, 1, 1, 1, 1, 1]}\n                            fuzziness={0}\n                            // debounce={100}\n                            highlight={true}\n                            highlightField={[\"Brands\", \"Witness_Name\", \"Person_Mentioned\", \"Organization_Mentioned\", \"Title\"]}\n                            placeholder=\"Search Tobacco\"\n                            title=\"Search for Tobacco\"\n                            react={{\n                                and: [\"Brands\", \"Witness_Name\", \"Person_Mentioned\", \"Organization_Mentioned\", \"Title\"],\n                                or: [\"Topic\"]\n                            }}\n                        // renderNoSuggestion={() => (\n                        //     <div>\n                        //         No suggestions found\n                        // </div>\n                        // )}\n\n                        />\n                    </div>\n\n                    <div className=\"container\">\n                        <div>\n                            <MultiList\n                                componentId=\"filter_Document_Type\"\n                                title=\"Document_Type\"\n                                dataField=\"Document_Type\"\n                                size={100}\n                                className=\"filter\"\n                            />\n\n                            <MultiList\n                                componentId=\"filter_availablility\"\n                                dataField=\"availablility\"\n                                size={100}\n                                title=\"availablility\"\n                                className=\"filter\"\n                            />\n\n                            <MultiDropdownList\n                                componentId=\"filter_availablilitystatus\"\n                                dataField=\"availablilitystatus\"\n                                size={100}\n                                title=\"availablilitystatus\"\n                                className=\"filter\"\n                            />\n\n                            <DateRange\n                                componentId=\"filter_Document_Date\"\n                                dataField=\"Document_Date\"\n                                title=\"Document_Date\"\n                                customQuery={this.dateQuery}\n                                initialMonth={new Date('2019-10-01')}\n                            />\n\n                        </div>\n\n                        <div>\n                            <SelectedFilters\n                                showClearAll={true}\n                                clearAllLabel=\"Clear filters\"\n                            />\n                            <ReactiveList\n                                componentId=\"List\"\n                                dataField=\"Title\"\n                                pagination={true}\n                                className=\"result\"\n                                size={5}\n                                loader=\"Loading Results..\"\n                                react={{\n                                    and: [\"filter_Document_Type\", \"filter_availablility\", \"filter_availablilitystatus\", \"filter_Brands\", \"search\"]\n                                }}\n                                render={({ data }) => (\n                                    <ResultListWrapper>\n                                        {data.map(res => (\n                                            <ResultList key={res._id}>\n                                                {/* <ResultList.Image src={res.image} /> */}\n                                                <ResultList.Content>\n                                                    <ResultList.Title>\n                                                        <div\n                                                            className=\"book-title\"\n                                                            dangerouslySetInnerHTML={{\n                                                                __html: res.Title,\n                                                            }}\n                                                        />\n                                                    </ResultList.Title>\n                                                    <ResultList.Description>\n                                                        <div className=\"flex column justify-space-between\">\n                                                            <div>\n                                                                <div>\n                                                                    by{' '}\n                                                                    {/* <span className=\"authors-list\">\n                                                                        {res.Witness_Name}\n                                                                    </span> */}\n                                                                    <div\n                                                                        className=\"authors-list\"\n                                                                        dangerouslySetInnerHTML={{\n                                                                            __html: res.Witness_Name,\n                                                                        }}\n                                                                    />\n                                                                </div>\n                                                                {/* <div className=\"ratings-list flex align-center\">\n                                                                <span className=\"stars\">\n                                                                    {Array(res.average_rating_rounded)\n                                                                        .fill('x')\n                                                                        .map((\n                                                                            res, // eslint-disable-line\n                                                                            index,\n                                                                        ) => (\n                                                                                <i\n                                                                                    className=\"fas fa-star\"\n                                                                                    key={index} // eslint-disable-line\n                                                                                />\n                                                                            ))}\n                                                                </span>\n                                                                <span className=\"avg-rating\">\n                                                                    ({res.average_rating} avg)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t        </span>\n                                                            </div> */}\n                                                            </div>\n                                                            <span className=\"pub-year\">\n                                                                Pub: {res.Document_Date}\n                                                            </span>\n                                                            <div\n                                                                className=\"book-text\"\n                                                                dangerouslySetInnerHTML={{\n                                                                    __html: res.Case,\n                                                                }}\n                                                            />\n                                                            <div\n                                                                className=\"book-text\"\n                                                                dangerouslySetInnerHTML={{\n                                                                    __html: res.Organization_Mentioned,\n                                                                }}\n                                                            />\n                                                        </div>\n                                                    </ResultList.Description>\n\n                                                </ResultList.Content>\n                                            </ResultList>\n                                        ))}\n                                    </ResultListWrapper>\n                                )}\n\n                            />\n                        </div>\n                    </div>\n                </div>\n            </ReactiveBase >\n        );\n    }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<Main />, rootElement);\n"],"sourceRoot":""}