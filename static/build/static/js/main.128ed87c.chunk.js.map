{"version":3,"sources":["index.js"],"names":["ResultListWrapper","ReactiveList","config","set","elasticsearch","base_uri","client","axios","create","baseURL","get","json","advanced_query","Main","to","path","Etd","Tobacco","Component","app","url","theme","typography","fontFamily","transformRequest","request","request_body","body","split","body_preference","JSON","parse","body_query","preference","query","bool","must","should","multi_match","length","method","data","stringify","headers","className","componentId","dataField","fieldWeights","fuzziness","highlight","placeholder","title","react","and","size","focused","autoFocusEnd","numberOfMonths","initialMonth","Date","showClearAll","clearAllLabel","pagination","loader","render","map","res","key","_id","Content","Title","dangerouslySetInnerHTML","__html","Description","onclick_book_title","obj","contentType","success","console","log","$","post","customQuery","value","props","fields","highlightField","or","onClick","Witness_Name","Document_Date","Case","Organization_Mentioned","rootElement","document","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.128ed87c.chunk.js","sourcesContent":["/*\n * @Author: Chris\n * Created Date: 2019-11-07 14:21:27\n * -----\n * Last Modified: 2019-11-07 15:00:50\n * Modified By: Chris\n * -----\n * Copyright (c) 2019\n */\n\nimport ReactDOM from \"react-dom\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\nimport React, { Component } from \"react\";\nimport {\n    ReactiveBase,\n    ResultList,\n    ReactiveList,\n    MultiList,\n    MultiDropdownList,\n    DataSearch,\n    SelectedFilters,\n    DateRange\n} from \"@appbaseio/reactivesearch\";\nimport axios from \"axios\";\nimport \"./styles.css\";\nimport config from 'react-global-configuration';\nimport $ from 'jquery';\n\nconst { ResultListWrapper } = ReactiveList;\n\n// Global Configurations\nconfig.set({\n    elasticsearch: \"http://localhost:9200/\",\n    base_uri: \"http://0.0.0.0:3000\"\n});\n\nconst client = axios.create({\n    baseURL: config.get(\"base_uri\"),\n    json: true\n});\n\nvar advanced_query = [\"Brands\", \"Witness_Name\", \"Person_Mentioned\", \"Organization_Mentioned\", \"Title\", \"Topic\"];\n\n// Main Search Page\n// With routers \nclass Main extends Component {\n    render() {\n        return (\n            <Router>\n                <div>\n                    <nav>\n                        <ul>\n                            <li>\n                                <Link to=\"/search/etd\">etd</Link>\n                            </li>\n                            <li>\n                                <Link to=\"/search/tobacco\">tobacco</Link>\n                            </li>\n                        </ul>\n                    </nav>\n                    {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n                    <Switch>\n                        <Route path=\"/search/etd\">\n                            <Etd />\n                        </Route>\n                        <Route path=\"/search/tobacco\">\n                            <Tobacco />\n                        </Route>\n                    </Switch>\n                </div>\n            </Router>\n        )\n    }\n}\n\n\n// Search page for ETD\nclass Etd extends Component {\n    render() {\n        return (\n            <ReactiveBase\n                app=\"etd_metadata\"\n                // credentials=\"egdxpZGTu:54c431d1-6a44-44b8-b84a-e46c4fed2de6\"\n                url={config.get('elasticsearch')}\n                theme={{\n                    typography: {\n                        fontFamily:\n                            '\"Lato\", \"Open Sans\", \"Montserrat\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Noto Sans\", \"Ubuntu\", \"Droid Sans\", \"Helvetica Neue\", sans-serif'\n                    }\n                }}\n                transformRequest={request => {\n                    // Auto-suggestions start from 3rd characters\n                    var request_body = request.body.split('\\n');\n\n\n                    // var searchText = document.getElementById(\"search-downshift-input\").value;\n                    // // console.log(\"The search bar says: \"+ searchText);\n                    // var sT = searchText.split(\":\");\n                    // console.log(\"The length of the split is \" + sT.length);\n                    // if (sT.length > 1) //the first part of the split should be the relevant field\n                    // {\n                    //     advanced_query = [\"title-none\"];\n                    // }\n                    // else {   //if it isn't an advanced query then reset it to match all the fields\n                    //     advanced_query = [\"degree-level\", \"contributor-department\", \"contributor-author\",\n                    //         \"contributor-committeechair\", \"contributor-committeecochair\",\n                    //         \"contributor-committeemember\",\n                    //         \"degree-name\", \"description-abstract\", \"Author Email\", \"subject-none\",\n                    //         \"title-none\", \"type-none\"];\n\n                    // }\n\n                    var body_preference = JSON.parse(request_body[0])\n                    var body_query = JSON.parse(request_body[1])\n\n                    // console.log(\"The body_query is: \" + request_body[1]);\n\n                    if (body_preference.preference === \"search\") {\n                        if (body_query.query.bool.must[0].bool.must[0].bool.should[0].multi_match.query.length < 3) {\n                            return null;\n                        }\n                    }\n\n                    // Post logs\n                    client({\n                        method: 'post',\n                        url: '/emitlogs',\n                        data: JSON.stringify(request),\n                        headers: {\n                            \"Content-Type\": \"application/json\",\n                        }\n                    });\n                    return request\n                }} //TODO: replace with apiClient function to send request to back-end (Flask API)\n            >\n                <div className=\"fek-searching\">\n                    <div className=\"searchbar\">\n                        <DataSearch\n                            componentId=\"search\"\n                            dataField={[\"contributor-department\", \"contributor-author\",\n                                \"contributor-committeechair\", \"contributor-committeecochair\",\n                                \"contributor-committeemember\", \"degree-name\", \"description-abstract\", \"Author Email\", \"subject-none\",\n                                \"title-none\"]}\n                            // customQuery={\n                            //     function (value, props) {\n                            //         return {\n                            //             query: {\n                            //                 multi_match: {\n                            //                     query: value,\n                            //                     fields: advanced_query\n                            //                 }\n                            //             }\n                            //         }\n                            //     }\n                            // }\n                            fieldWeights={[1, 3, 3, 3, 1, 1, 1, 1, 1, 5, 1]}\n                            fuzziness={0}\n                            // debounce={100}\n                            highlight={true}\n                            placeholder=\"Search ETD\"\n                            title=\"Search for ETD\"\n                            react={{\n                                and: [\"contributor-department\", \"contributor-author\",\n                                    \"contributor-committeechair\", \"contributor-committeecochair\",\n                                    \"contributor-committeemember\",\n                                    \"degree-name\", \"description-abstract\", \"Author Email\", \"subject-none\", \"title-none\"]\n                            }}\n                        // renderNoSuggestion={() => (\n                        //     <div>\n                        //         No suggestions found\n                        // </div>\n                        // )}\n\n                        />\n                    </div>\n\n                    <div className=\"container\">\n                        <div>\n                            <MultiList\n                                componentId=\"filter_type-none\"\n                                title=\"type-none\"\n                                dataField=\"type-none\"\n                                size={100}\n                                className=\"filter\"\n                            />\n\n                            <MultiDropdownList\n                                componentId=\"filter_degree-level\"\n                                dataField=\"degree-level\"\n                                size={100}\n                                title=\"degree-level\"\n                            />\n\n                            <DateRange\n                                componentId=\"filter_date-issued\"\n                                dataField=\"date-issued\"\n                                title=\"date-issued\"\n                                // customQuery={this.dateQuery}\n                                focused={false}\n                                autoFocusEnd={true}\n                                numberOfMonths={1}\n                                initialMonth={new Date('2019-10-01')}\n                            />\n\n                        </div>\n\n                        <div>\n                            <SelectedFilters\n                                showClearAll={true}\n                                clearAllLabel=\"Clear filters\"\n                            />\n                            <ReactiveList\n                                componentId=\"List\"\n                                dataField=\"Title\"\n                                pagination={true}\n                                className=\"result\"\n                                size={5}\n                                loader=\"Loading Results..\"\n                                react={{\n                                    and: [\"filter_type-none\", \"filter_degree-level\", \"search\", \"filter_date-issued\"]\n                                }}\n                                render={({ data }) => (\n                                    <ResultListWrapper>\n                                        {data.map(res => (\n                                            <ResultList key={res._id}>\n                                                {/* <ResultList.Image src={res.image} /> */}\n                                                <ResultList.Content>\n                                                    <ResultList.Title>\n                                                        <div\n                                                            className=\"book-title\"\n                                                            dangerouslySetInnerHTML={{\n                                                                __html: \"<a href=\\\"\" + \"#\" + \"\\\">\\n\" + res[\"title-none\"] + \"</a>\",\n                                                            }}\n                                                        />\n                                                    </ResultList.Title>\n                                                    <ResultList.Description>\n                                                        <div className=\"flex column justify-space-between\">\n                                                            <div>\n                                                                <div>\n                                                                    by{' '}\n                                                                    {/* <span className=\"authors-list\">\n                                                                        {res.Witness_Name}\n                                                                    </span> */}\n                                                                    <div\n                                                                        className=\"authors-list\"\n                                                                        dangerouslySetInnerHTML={{\n                                                                            __html: res[\"contributor-author\"] + ', ' + res[\"contributor-committeechair\"] + ', ' + res[\"contributor-committeecochair\"] + ', ' + res[\"contributor-committeemember\"],\n                                                                        }}\n                                                                    />\n                                                                </div>\n                                                                {/* <div className=\"ratings-list flex align-center\">\n                                                                <span className=\"stars\">\n                                                                    {Array(res.average_rating_rounded)\n                                                                        .fill('x')\n                                                                        .map((\n                                                                            res, // eslint-disable-line\n                                                                            index,\n                                                                        ) => (\n                                                                                <i\n                                                                                    className=\"fas fa-star\"\n                                                                                    key={index} // eslint-disable-line\n                                                                                />\n                                                                            ))}\n                                                                </span>\n                                                                <span className=\"avg-rating\">\n                                                                    ({res.average_rating} avg)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t        </span>\n                                                            </div> */}\n                                                            </div>\n                                                            <span className=\"pub-year\">\n                                                                Pub: {res[\"date-issued\"]}\n                                                            </span>\n                                                            <div\n                                                                className=\"book-text\"\n                                                                dangerouslySetInnerHTML={{\n                                                                    __html: res[\"description-abstract\"],\n                                                                }}\n                                                            />\n                                                            <div\n                                                                className=\"book-text\"\n                                                                dangerouslySetInnerHTML={{\n                                                                    __html: res[\"subject-none\"],\n                                                                }}\n                                                            />\n                                                        </div>\n                                                    </ResultList.Description>\n\n                                                </ResultList.Content>\n                                            </ResultList>\n                                        ))}\n                                    </ResultListWrapper>\n                                )}\n\n                            />\n                        </div>\n                    </div>\n                </div>\n            </ReactiveBase >\n        );\n    }\n}\n\n// Search Page for Tobacco\nclass Tobacco extends Component {\n    onclick_book_title = obj => {\n        var data = {\n            method: 'post',\n            url: '/emitlogs',\n            data: JSON.stringify(obj),\n            contentType: \"application/json\",\n            success: function () {\n                console.log('success');\n                //window.location.href = obj.url;\n            }\n        };\n        $.post(data);\n    };\n    render() {\n        return (\n            <ReactiveBase\n                app=\"tobacco3\"\n                // credentials=\"egdxpZGTu:54c431d1-6a44-44b8-b84a-e46c4fed2de6\"\n                url={config.get('elasticsearch')}\n                theme={{\n                    typography: {\n                        fontFamily:\n                            '\"Lato\", \"Open Sans\", \"Montserrat\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Noto Sans\", \"Ubuntu\", \"Droid Sans\", \"Helvetica Neue\", sans-serif'\n                    }\n                }}\n                transformRequest={request => {\n                    // Auto-suggestions start from 3rd characters\n                    var request_body = request.body.split('\\n');\n\n\n                    // var searchText = document.getElementById(\"search-downshift-input\").value;\n                    // // console.log(\"The search bar says: \"+ searchText);\n                    // var sT = searchText.split(\":\");\n                    // console.log(\"The length of the split is \" + sT.length);\n                    // if (sT.length > 1) //the first part of the split should be the relevant field\n                    // {\n                    //     advanced_query = [\"Title\"];\n                    // }\n                    // else {   //if it isn't an advanced query then reset it to match all the fields\n                    //     advanced_query = [\"Brands\", \"Witness_Name\", \"Person_Mentioned\", \"Organization_Mentioned\", \"Title\", \"Topic\"];\n\n                    // }\n\n                    var body_preference = JSON.parse(request_body[0])\n                    var body_query = JSON.parse(request_body[1])\n\n                    console.log(\"The body_query is: \" + request_body[1]);\n\n                    if (body_preference.preference === \"search\") {\n                        if (body_query.query.bool.must[0].bool.must[0].bool.should[0].multi_match.query.length < 3) {\n                            return null;\n                        }\n                    }\n\n                    // Post logs\n                    client({\n                        method: 'post',\n                        url: '/emitlogs',\n                        data: JSON.stringify(request),\n                        headers: {\n                            \"Content-Type\": \"application/json\",\n                        }\n                    });\n                    return request\n                }} //TODO: replace with apiClient function to send request to back-end (Flask API)\n            >\n                <div className=\"fek-searching\">\n                    <div className=\"searchbar\">\n                        <DataSearch\n                            componentId=\"search\"\n                            dataField={[\n                                \"Brands\", \"Witness_Name\", \"Person_Mentioned\", \"Organization_Mentioned\", \"Title\", \"Topic\"\n                            ]}\n                            customQuery={\n                                function (value, props) {\n                                    return {\n                                        query: {\n                                            multi_match: {\n                                                query: value,\n                                                fields: advanced_query\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            fieldWeights={[1, 3, 1, 1, 1, 1, 5, 1]}\n                            fuzziness={0}\n                            // debounce={100}\n                            highlight={true}\n                            highlightField={[\"Brands\", \"Witness_Name\", \"Person_Mentioned\", \"Organization_Mentioned\", \"Title\"]}\n                            placeholder=\"Search Tobacco\"\n                            title=\"Search for Tobacco\"\n                            react={{\n                                and: [\"Brands\", \"Witness_Name\", \"Person_Mentioned\", \"Organization_Mentioned\", \"Title\"],\n                                or: [\"Topic\"]\n                            }}\n                        // renderNoSuggestion={() => (\n                        //     <div>\n                        //         No suggestions found\n                        // </div>\n                        // )}\n\n                        />\n                    </div>\n\n                    <div className=\"container\">\n                        <div>\n                            <MultiList\n                                componentId=\"filter_Document_Type\"\n                                title=\"Document_Type\"\n                                dataField=\"Document_Type\"\n                                size={100}\n                                className=\"filter\"\n                            />\n\n                            <MultiList\n                                componentId=\"filter_availablility\"\n                                dataField=\"availablility\"\n                                size={100}\n                                title=\"availablility\"\n                                className=\"filter\"\n                            />\n\n                            <MultiDropdownList\n                                componentId=\"filter_availablilitystatus\"\n                                dataField=\"availablilitystatus\"\n                                size={100}\n                                title=\"availablilitystatus\"\n                                className=\"filter\"\n                            />\n\n                            <DateRange\n                                componentId=\"filter_Document_Date\"\n                                dataField=\"Document_Date\"\n                                title=\"Document_Date\"\n                                // customQuery={this.dateQuery}\n                                focused={false}\n                                autoFocusEnd={true}\n                                numberOfMonths={1}\n                                initialMonth={new Date('2019-10-01')}\n                            />\n\n                        </div>\n\n                        <div>\n                            <SelectedFilters\n                                showClearAll={true}\n                                clearAllLabel=\"Clear filters\"\n                            />\n                            <ReactiveList\n                                componentId=\"List\"\n                                dataField=\"Title\"\n                                pagination={true}\n                                className=\"result\"\n                                size={5}\n                                loader=\"Loading Results..\"\n                                react={{\n                                    and: [\"filter_Document_Type\", \"filter_availablility\", \"filter_availablilitystatus\", \"filter_Brands\", \"search\", \"filter_Document_Date\"]\n                                }}\n                                render={({ data }) => (\n                                    <ResultListWrapper>\n                                        {data.map(res => (\n                                            <ResultList key={res._id}>\n                                                {/* <ResultList.Image src={res.image} /> */}\n                                                <ResultList.Content>\n                                                    <ResultList.Title>\n                                                        <div\n                                                            className=\"book-title\"\n                                                            onClick={() => this.onclick_book_title(res)}\n                                                            dangerouslySetInnerHTML={{\n                                                                __html: \"<a href=\\\"\" + res.url + \"\\\">\\n\" + res.Title + \"</a>\",\n                                                            }}\n                                                        />\n                                                    </ResultList.Title>\n                                                    <ResultList.Description>\n                                                        <div className=\"flex column justify-space-between\">\n                                                            <div>\n                                                                <div>\n                                                                    by{' '}\n                                                                    {/* <span className=\"authors-list\">\n                                                                        {res.Witness_Name}\n                                                                    </span> */}\n                                                                    <div\n                                                                        className=\"authors-list\"\n                                                                        dangerouslySetInnerHTML={{\n                                                                            __html: res.Witness_Name,\n                                                                        }}\n                                                                    />\n                                                                </div>\n                                                                {/* <div className=\"ratings-list flex align-center\">\n                                                                <span className=\"stars\">\n                                                                    {Array(res.average_rating_rounded)\n                                                                        .fill('x')\n                                                                        .map((\n                                                                            res, // eslint-disable-line\n                                                                            index,\n                                                                        ) => (\n                                                                                <i\n                                                                                    className=\"fas fa-star\"\n                                                                                    key={index} // eslint-disable-line\n                                                                                />\n                                                                            ))}\n                                                                </span>\n                                                                <span className=\"avg-rating\">\n                                                                    ({res.average_rating} avg)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t        </span>\n                                                            </div> */}\n                                                            </div>\n                                                            <span className=\"pub-year\">\n                                                                Pub: {res.Document_Date}\n                                                            </span>\n                                                            <div\n                                                                className=\"book-text\"\n                                                                dangerouslySetInnerHTML={{\n                                                                    __html: res.Case,\n                                                                }}\n                                                            />\n                                                            <div\n                                                                className=\"book-text\"\n                                                                dangerouslySetInnerHTML={{\n                                                                    __html: res.Organization_Mentioned,\n                                                                }}\n                                                            />\n                                                        </div>\n                                                    </ResultList.Description>\n\n                                                </ResultList.Content>\n                                            </ResultList>\n                                        ))}\n                                    </ResultListWrapper>\n                                )}\n\n                            />\n                        </div>\n                    </div>\n                </div>\n            </ReactiveBase >\n        );\n    }\n}\n\n\n\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<Main />, rootElement);\n\n\n\n\n\n\n"],"sourceRoot":""}