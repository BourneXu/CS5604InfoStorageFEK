{"version":3,"sources":["index.js"],"names":["ResultListWrapper","ReactiveList","config","set","elasticsearch","base_uri","client","axios","create","baseURL","get","json","rootElement","document","getElementById","ReactDOM","render","app","url","theme","typography","fontFamily","transformRequest","request","method","data","JSON","stringify","headers","className","componentId","dataField","fuzziness","highlight","highlightField","placeholder","title","react","and","renderNoSuggestion","size","showClearAll","clearAllLabel","pagination","loader","map","res","key","_id","Content","Title","dangerouslySetInnerHTML","__html","play_name","Description","speaker","text_entry"],"mappings":"6MAAA,8FAeQA,EAAsBC,IAAtBD,kBAGRE,IAAOC,IAAI,CACPC,cAAe,yBACfC,SAAU,wBAGd,IAAMC,EAASC,IAAMC,OAAO,CACxBC,QAASP,IAAOQ,IAAI,YACpBC,MAAM,IA8JV,IAAMC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,mBA1JhB,WACI,OACI,kBAAC,IAAD,CACIC,IAAI,SAEJC,IAAKhB,IAAOQ,IAAI,iBAChBS,MAAO,CACHC,WAAY,CACRC,WACI,kKAGZC,iBAAkB,SAAAC,GAUd,OARAjB,EAAO,CACHkB,OAAQ,OACRN,IAAK,YACLO,KAAMC,KAAKC,UAAUJ,GACrBK,QAAS,CACL,eAAgB,sBAGjBL,IAGX,yBAAKM,UAAU,iBACX,yBAAKA,UAAU,aACX,kBAAC,IAAD,CACIC,YAAY,SACZC,UAAW,CACP,cAGJC,UAAW,EAEXC,WAAW,EACXC,eAAgB,CAAC,cACjBC,YAAY,aACZC,MAAM,uBACNC,MAAO,CACHC,IAAK,CAAC,eAEVC,mBAAoB,kBAChB,yDAQZ,yBAAKV,UAAU,aACX,6BACI,kBAAC,IAAD,CACIC,YAAY,mBACZM,MAAM,YACNL,UAAU,YACVS,KAAM,IACNX,UAAU,WAGd,kBAAC,IAAD,CACIC,YAAY,uBACZC,UAAU,gBACVS,KAAM,IACNJ,MAAM,gBACNP,UAAU,YAGlB,6BACI,kBAAC,IAAD,CACIY,cAAc,EACdC,cAAc,kBAElB,kBAAC,IAAD,CACIZ,YAAY,OACZC,UAAU,aACVY,YAAY,EACZd,UAAU,SACVW,KAAM,EACNI,OAAO,oBACPP,MAAO,CACHC,IAAK,CAAC,mBAAoB,uBAAwB,WAEtDtB,OAAQ,gBAAGS,EAAH,EAAGA,KAAH,OACJ,kBAACzB,EAAD,KACKyB,EAAKoB,KAAI,SAAAC,GAAG,OACT,kBAAC,IAAD,CAAYC,IAAKD,EAAIE,KAEjB,kBAAC,IAAWC,QAAZ,KACI,kBAAC,IAAWC,MAAZ,KACI,yBACIrB,UAAU,aACVsB,wBAAyB,CACrBC,OAAQN,EAAIO,cAIxB,kBAAC,IAAWC,YAAZ,KACI,yBAAKzB,UAAU,qCACX,6BACI,kCACO,IACH,0BAAMA,UAAU,gBACXiB,EAAIS,WAyBjB,yBACI1B,UAAU,YACVsB,wBAAyB,CACrBC,OAAQN,EAAIU,+BAsB5D,MAAS5C,K","file":"static/js/main.e33292cd.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n    ReactiveBase,\n    ResultList,\n    ReactiveList,\n    MultiList,\n    MultiDropdownList,\n    DataSearch,\n    SelectedFilters\n} from \"@appbaseio/reactivesearch\";\nimport axios from \"axios\";\nimport \"./styles.css\";\nimport config from 'react-global-configuration';\n\nconst { ResultListWrapper } = ReactiveList;\n\n// Global Configurations\nconfig.set({\n    elasticsearch: \"http://localhost:9200/\",\n    base_uri: \"http://0.0.0.0:3000\"\n});\n\nconst client = axios.create({\n    baseURL: config.get(\"base_uri\"),\n    json: true\n});\n\n\n\nfunction App() {\n    return (\n        <ReactiveBase\n            app=\"shakes\"\n            // credentials=\"egdxpZGTu:54c431d1-6a44-44b8-b84a-e46c4fed2de6\"\n            url={config.get('elasticsearch')}\n            theme={{\n                typography: {\n                    fontFamily:\n                        '\"Lato\", \"Open Sans\", \"Montserrat\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Noto Sans\", \"Ubuntu\", \"Droid Sans\", \"Helvetica Neue\", sans-serif'\n                }\n            }}\n            transformRequest={request => {\n                // console.log(request);\n                client({\n                    method: 'post',\n                    url: '/emitlogs',\n                    data: JSON.stringify(request),\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                    }\n                });\n                return request\n            }} //TODO: replace with apiClient function to send request to back-end (Flask API)\n        >\n            <div className=\"fek-searching\">\n                <div className=\"searchbar\">\n                    <DataSearch\n                        componentId=\"search\"\n                        dataField={[\n                            \"text_entry\",\n                        ]}\n                        // fieldWeights={[2, 1, 2, 1, 1, 1, 1, 1]}\n                        fuzziness={0}\n                        // debounce={100}\n                        highlight={true}\n                        highlightField={[\"text_entry\"]}\n                        placeholder=\"Search ETD\"\n                        title=\"FEK Searching System\"\n                        react={{\n                            and: ['text_entry'],\n                        }}\n                        renderNoSuggestion={() => (\n                            <div>\n                                No suggestions found\n                            </div>\n                        )}\n\n                    />\n                </div>\n\n                <div className=\"container\">\n                    <div>\n                        <MultiList\n                            componentId=\"filter_play_name\"\n                            title=\"play_name\"\n                            dataField=\"play_name\"\n                            size={100}\n                            className=\"filter\"\n                        />\n\n                        <MultiDropdownList\n                            componentId=\"filter_speech_number\"\n                            dataField=\"speech_number\"\n                            size={100}\n                            title=\"speech_number\"\n                            className=\"filter\"\n                        />\n                    </div>\n                    <div>\n                        <SelectedFilters\n                            showClearAll={true}\n                            clearAllLabel=\"Clear filters\"\n                        />\n                        <ReactiveList\n                            componentId=\"List\"\n                            dataField=\"text_entry\"\n                            pagination={true}\n                            className=\"result\"\n                            size={5}\n                            loader=\"Loading Results..\"\n                            react={{\n                                and: [\"filter_play_name\", \"filter_speech_number\", \"search\"]\n                            }}\n                            render={({ data }) => (\n                                <ResultListWrapper>\n                                    {data.map(res => (\n                                        <ResultList key={res._id}>\n                                            {/* <ResultList.Image src={res.image} /> */}\n                                            <ResultList.Content>\n                                                <ResultList.Title>\n                                                    <div\n                                                        className=\"book-title\"\n                                                        dangerouslySetInnerHTML={{\n                                                            __html: res.play_name,\n                                                        }}\n                                                    />\n                                                </ResultList.Title>\n                                                <ResultList.Description>\n                                                    <div className=\"flex column justify-space-between\">\n                                                        <div>\n                                                            <div>\n                                                                by{' '}\n                                                                <span className=\"authors-list\">\n                                                                    {res.speaker}\n                                                                </span>\n                                                            </div>\n                                                            {/* <div className=\"ratings-list flex align-center\">\n                                                                <span className=\"stars\">\n                                                                    {Array(res.average_rating_rounded)\n                                                                        .fill('x')\n                                                                        .map((\n                                                                            res, // eslint-disable-line\n                                                                            index,\n                                                                        ) => (\n                                                                                <i\n                                                                                    className=\"fas fa-star\"\n                                                                                    key={index} // eslint-disable-line\n                                                                                />\n                                                                            ))}\n                                                                </span>\n                                                                <span className=\"avg-rating\">\n                                                                    ({res.average_rating} avg)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t        </span>\n                                                            </div> */}\n                                                        </div>\n                                                        {/* <span className=\"pub-year\">\n                                                            Pub {res.original_publication_year}\n                                                        </span> */}\n                                                        <div\n                                                            className=\"book-text\"\n                                                            dangerouslySetInnerHTML={{\n                                                                __html: res.text_entry,\n                                                            }}\n                                                        />\n\n                                                    </div>\n                                                </ResultList.Description>\n\n                                            </ResultList.Content>\n                                        </ResultList>\n                                    ))}\n                                </ResultListWrapper>\n                            )}\n\n                        />\n                    </div>\n                </div>\n            </div>\n        </ReactiveBase >\n    );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}