{"version":3,"sources":["index.js"],"names":["ResultListWrapper","ReactiveList","config","set","elasticsearch","base_uri","client","axios","create","baseURL","get","json","advanced_query","Main","value","query","range","gte","moment","start","format","lte","end","bool","must","app","url","theme","typography","fontFamily","transformRequest","request","request_body","body","split","sT","document","getElementById","console","log","length","body_preference","JSON","parse","body_query","preference","should","multi_match","method","data","stringify","headers","className","componentId","customQuery","props","fields","fuzziness","highlight","highlightField","placeholder","title","react","and","or","dataField","size","focused","autoFocusEnd","numberOfMonths","initialMonth","Date","showClearAll","clearAllLabel","pagination","loader","render","map","res","key","_id","Content","Title","dangerouslySetInnerHTML","__html","Description","Witness_Name","Document_Date","Case","Organization_Mentioned","Component","rootElement","ReactDOM"],"mappings":"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","file":"static/js/main.24b8548e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport moment from 'moment';\nimport {\n    ReactiveBase,\n    ResultList,\n    ReactiveList,\n    MultiList,\n    MultiDropdownList,\n    DataSearch,\n    SelectedFilters,\n    DateRange\n} from \"@appbaseio/reactivesearch\";\nimport axios from \"axios\";\nimport \"./styles.css\";\nimport config from 'react-global-configuration';\n\nconst { ResultListWrapper } = ReactiveList;\n\n// Global Configurations\nconfig.set({\n    elasticsearch: \"http://localhost:9200/\",\n    base_uri: \"http://0.0.0.0:3000\"\n});\n\nconst client = axios.create({\n    baseURL: config.get(\"base_uri\"),\n    json: true\n});\n\nvar advanced_query = [\"Brands\", \"Witness_Name\", \"Person_Mentioned\", \"Organization_Mentioned\", \"Title\", \"Topic\"];\n// this.customQuery=function(gvalue) {\n//   return {\n//     \"query\": {\n//       \"simple_query_string\" : {\n//        \"query\": gvalue,\n//        \"fields\": [\"Title\"]\n//    }\n//\n//     }\n//   }\n// }\n\nclass Main extends Component {\n    dateQuery(value) {\n        let query = null;\n        if (value) {\n            query = [\n                {\n                    range: {\n                        \"Document_Date\": {\n                            gte: moment(value.start).format('YYYY-MM-DD'),\n                            lte: moment(value.end).format('YYYY-MM-DD'),\n                        },\n                    },\n                },\n            ];\n        }\n        return query ? { query: { bool: { must: query } } } : null;\n    }\n\n    render() {\n        return (\n            <ReactiveBase\n                app=\"tobacco3\"\n                // credentials=\"egdxpZGTu:54c431d1-6a44-44b8-b84a-e46c4fed2de6\"\n                url={config.get('elasticsearch')}\n                theme={{\n                    typography: {\n                        fontFamily:\n                            '\"Lato\", \"Open Sans\", \"Montserrat\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Noto Sans\", \"Ubuntu\", \"Droid Sans\", \"Helvetica Neue\", sans-serif'\n                    }\n                }}\n                transformRequest={request => {\n                    // Auto-suggestions start from 3rd characters\n                    var request_body = request.body.split('\\n');\n\n\n                    var searchText = document.getElementById(\"search-downshift-input\").value;\n                    // console.log(\"The search bar says: \"+ searchText);\n                    var sT = searchText.split(\":\");\n                    console.log(\"The length of the split is \" + sT.length);\n                    if (sT.length > 1) //the first part of the split should be the relevant field\n                    {\n                        advanced_query = [\"Title\"];\n                    }\n                    else {   //if it isn't an advanced query then reset it to match all the fields\n                        advanced_query = [\"Brands\", \"Witness_Name\", \"Person_Mentioned\", \"Organization_Mentioned\", \"Title\", \"Topic\"];\n\n                    }\n\n                    var body_preference = JSON.parse(request_body[0])\n                    var body_query = JSON.parse(request_body[1])\n\n                    console.log(\"The body_query is: \" + request_body[1]);\n\n                    if (body_preference.preference === \"search\") {\n                        if (body_query.query.bool.must[0].bool.must[0].bool.should[0].multi_match.query.length < 3) {\n                            return null;\n                        }\n                    }\n\n                    // Post logs\n                    client({\n                        method: 'post',\n                        url: '/emitlogs',\n                        data: JSON.stringify(request),\n                        headers: {\n                            \"Content-Type\": \"application/json\",\n                        }\n                    });\n                    return request\n                }} //TODO: replace with apiClient function to send request to back-end (Flask API)\n            >\n                <div className=\"fek-searching\">\n                    <div className=\"searchbar\">\n                        <DataSearch\n                            componentId=\"search\"\n                            // dataField={[\n                            //     \"Brands\", \"Witness_Name\", \"Person_Mentioned\", \"Organization_Mentioned\", \"Title\", \"Topic\"\n                            // ]}\n                            customQuery={\n                                function (value, props) {\n                                    return {\n                                        query: {\n                                            multi_match: {\n                                                query: value,\n                                                fields: advanced_query\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            // fieldWeights={[2, 1, 2, 1, 1, 1, 1, 1]}\n                            fuzziness={0}\n                            // debounce={100}\n                            highlight={true}\n                            highlightField={[\"Brands\", \"Witness_Name\", \"Person_Mentioned\", \"Organization_Mentioned\", \"Title\"]}\n                            placeholder=\"Search Tobacco\"\n                            title=\"Search for Tobacco\"\n                            react={{\n                                and: [\"Brands\", \"Witness_Name\", \"Person_Mentioned\", \"Organization_Mentioned\", \"Title\"],\n                                or: [\"Topic\"]\n                            }}\n                        // renderNoSuggestion={() => (\n                        //     <div>\n                        //         No suggestions found\n                        // </div>\n                        // )}\n\n                        />\n                    </div>\n\n                    <div className=\"container\">\n                        <div>\n                            <MultiList\n                                componentId=\"filter_Document_Type\"\n                                title=\"Document_Type\"\n                                dataField=\"Document_Type\"\n                                size={100}\n                                className=\"filter\"\n                            />\n\n                            <MultiList\n                                componentId=\"filter_availablility\"\n                                dataField=\"availablility\"\n                                size={100}\n                                title=\"availablility\"\n                                className=\"filter\"\n                            />\n\n                            <MultiDropdownList\n                                componentId=\"filter_availablilitystatus\"\n                                dataField=\"availablilitystatus\"\n                                size={100}\n                                title=\"availablilitystatus\"\n                                className=\"filter\"\n                            />\n\n                            <DateRange\n                                componentId=\"filter_Document_Date\"\n                                dataField=\"Document_Date\"\n                                title=\"Document_Date\"\n                                // customQuery={this.dateQuery}\n                                focused={false}\n                                autoFocusEnd={true}\n                                numberOfMonths={1}\n                                initialMonth={new Date('2019-10-01')}\n                            />\n\n                        </div>\n\n                        <div>\n                            <SelectedFilters\n                                showClearAll={true}\n                                clearAllLabel=\"Clear filters\"\n                            />\n                            <ReactiveList\n                                componentId=\"List\"\n                                dataField=\"Title\"\n                                pagination={true}\n                                className=\"result\"\n                                size={5}\n                                loader=\"Loading Results..\"\n                                react={{\n                                    and: [\"filter_Document_Type\", \"filter_availablility\", \"filter_availablilitystatus\", \"filter_Brands\", \"search\", \"filter_Document_Date\"]\n                                }}\n                                render={({ data }) => (\n                                    <ResultListWrapper>\n                                        {data.map(res => (\n                                            <ResultList key={res._id}>\n                                                {/* <ResultList.Image src={res.image} /> */}\n                                                <ResultList.Content>\n                                                    <ResultList.Title>\n                                                        <div\n                                                            className=\"book-title\"\n                                                            dangerouslySetInnerHTML={{\n                                                                __html: res.Title,\n                                                            }}\n                                                        />\n                                                    </ResultList.Title>\n                                                    <ResultList.Description>\n                                                        <div className=\"flex column justify-space-between\">\n                                                            <div>\n                                                                <div>\n                                                                    by{' '}\n                                                                    {/* <span className=\"authors-list\">\n                                                                        {res.Witness_Name}\n                                                                    </span> */}\n                                                                    <div\n                                                                        className=\"authors-list\"\n                                                                        dangerouslySetInnerHTML={{\n                                                                            __html: res.Witness_Name,\n                                                                        }}\n                                                                    />\n                                                                </div>\n                                                                {/* <div className=\"ratings-list flex align-center\">\n                                                                <span className=\"stars\">\n                                                                    {Array(res.average_rating_rounded)\n                                                                        .fill('x')\n                                                                        .map((\n                                                                            res, // eslint-disable-line\n                                                                            index,\n                                                                        ) => (\n                                                                                <i\n                                                                                    className=\"fas fa-star\"\n                                                                                    key={index} // eslint-disable-line\n                                                                                />\n                                                                            ))}\n                                                                </span>\n                                                                <span className=\"avg-rating\">\n                                                                    ({res.average_rating} avg)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t        </span>\n                                                            </div> */}\n                                                            </div>\n                                                            <span className=\"pub-year\">\n                                                                Pub: {res.Document_Date}\n                                                            </span>\n                                                            <div\n                                                                className=\"book-text\"\n                                                                dangerouslySetInnerHTML={{\n                                                                    __html: res.Case,\n                                                                }}\n                                                            />\n                                                            <div\n                                                                className=\"book-text\"\n                                                                dangerouslySetInnerHTML={{\n                                                                    __html: res.Organization_Mentioned,\n                                                                }}\n                                                            />\n                                                        </div>\n                                                    </ResultList.Description>\n\n                                                </ResultList.Content>\n                                            </ResultList>\n                                        ))}\n                                    </ResultListWrapper>\n                                )}\n\n                            />\n                        </div>\n                    </div>\n                </div>\n            </ReactiveBase >\n        );\n    }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<Main />, rootElement);\n"],"sourceRoot":""}